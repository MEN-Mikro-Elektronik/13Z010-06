Function Description
====================
Fri May 25 11:06:28 MEST 2001
 
Overview of all Functions
-------------------------

QSPIM_GetEntry         - Initialize driver's jump table 
QSPIM_Init             - Allocate and return low-level handle, initialize hardware 
QSPIM_Exit             - De-initialize hardware and clean up memory 
QSPIM_Read             - Not supported for QSPIM driver 
QSPIM_Write            - Not supported for QSPIM driver 
QSPIM_SetStat          - Set the driver status 
QSPIM_GetStat          - Get the driver status 
QSPIM_BlockRead        - Read QSPI frame from driver receive fifo 
DirectWriteFunc        - Entry point for application when bypassing MDIS 
DirectISetstat         - Set the driver status from an user interrupt routine 
QSPIM_BlockWrite       - Write QSPI frame into driver internal buffer 
QSPIM_Irq              - Interrupt service routine 
QSPIM_Info             - Get information about hardware and driver requirements 
DMA_Init               - Init 8240 DMA 
DMA_Transfer           - Perform DMA transfer 
 

Function QSPIM_GetEntry()
-------------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        extern void LL_GetEntry( LL_ENTRY* drvP )
    #else
        extern void __QSPIM_GetEntry( LL_ENTRY* drvP )
    #endif

Description:
    Initialize driver's jump table

Input:
    ---

Output:
    drvP  pointer to the initialized jump table structure


Function QSPIM_Init()
---------------------

Syntax:
    static int32 QSPIM_Init(
        DESC_SPEC       *descP,
        OSS_HANDLE      *osHdl,
        MACCESS         *ma,
        OSS_SEM_HANDLE  *devSemHdl,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **hP
    )

Description:
    Allocate and return low-level handle, initialize hardware

    The function 
    - scans the descriptor
    - loads the loadable PLD
    - initializes the registers

    After QSPM_Init the timer/QSPI is stopped and must be started with 
    TIMER_STATE setstat

    Descriptor key        Default          Range/Unit
    --------------------  ---------------  -------------
    DEBUG_LEVEL_DESC      OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL           OSS_DBG_DEFAULT  see dbg.h
    PLD_LOAD              1                0..1
    PLD_CLOCK             33333333         [Hz]
    QSPI_QUEUE_LEN        256              16..256 [words]
    WOMQ                  0                0/1
    BITS                  16               8..16
    CPOL                  0                0/1
    CPHA                  0                0/1
    BAUD                  4000000          [Hz]
    DSCLK                 2000             [ns]
    DTL                   1000             [ns]
    PCS_DEFSTATE          0                0x0..0xf
    TIMER_CYCLE_TIME      500000           [ns] 
    RCV_FIFO_DEPTH        10               2..n

    PLD_LOAD: determines if PLD will be loaded 
    PLD_CLOCK: clock rate of PLD in Hz
    QSPI_QUEUE_LEN: 64 for D201 prototype, 256 for A12

    other codes: see corresponding setstats

Input:
    descSpec   pointer to descriptor data
    osHdl      oss handle
    ma         D201 variant:  ma[0] hw access handle for Plx
                              ma[1] hw access handle for QSPI
    ma         STD variant:   ma[0] hw access handle for QSPI
    devSemHdl  device semaphore handle
    irqHdl     irq handle

Output:
    hP         pointer to low-level driver handle
    return     success (0) or error code


Function QSPIM_Exit()
---------------------

Syntax:
    static int32 QSPIM_Exit(
       LL_HANDLE    **hP
    )

Description:
    De-initialize hardware and clean up memory

    The interrupt is disabled.

Input:
    hP    pointer to low-level driver handle

Output:
    return    success (0) or error code


Function QSPIM_Read()
---------------------

Syntax:
    static int32 QSPIM_Read(
        LL_HANDLE *h,
        int32 ch,
        int32 *valueP
    )

Description:
    Not supported for QSPIM driver

Input:
    h    low-level handle
    ch       current channel

Output:
    valueP   read value
    return   success (0) or error code


Function QSPIM_Write()
----------------------

Syntax:
    static int32 QSPIM_Write(
        LL_HANDLE *h,
        int32 ch,
        int32 value
    )

Description:
    Not supported for QSPIM driver

Input:
    h    low-level handle
    ch       current channel
    value    value to write 

Output:
    return   success (0) or error code


Function QSPIM_SetStat()
------------------------

Syntax:
    static int32 QSPIM_SetStat(
        LL_HANDLE *h,
        int32  code,
        int32  ch,
        INT32_OR_64 value32_or_64
    )

Description:
    Set the driver status

    The following status codes are supported:

    ACTION CODES:

    Code                 Description                     Values
    -------------------  ------------------------------  ----------
    QSPIM_TIMER_STATE    start/stop cycle timer          0/1
    QSPIM_FRM_SIG_SET    install signal for QSPI frame   signal code
    QSPIM_FRM_SIG_CLR    remove signal for QSPI frame    don't care
    QSPIM_EMG_SIG_SET    install signal for emergency    signal code
    QSPIM_EMG_SIG_CLR    remove signal for emergency     don't care
    QSPIM_CLR_RCV_FIFO   clear receive fifo              don't care
    QSPIM_BLK_CALLBACK   install/remove callback func    see below
    QPSIM_FRAMESYN       activate/deactive FRAMESYN pin  0/1

    CONFIGURATION CODES:

    Code                 Description                     Values
    -------------------  ------------------------------  ----------
    QSPIM_WOMQ           wired OR for QSPI pins          0/1
    QSPIM_BITS           bits per word                   8..16
    QSPIM_CPOL           clock polarity                  0/1
    QSPIM_CPHA           clock phase                     0/1
    QSPIM_BAUD           SCLK baudrate                   [Hz]
    QSPIM_DSCLK          PCS to SCLK delay               [ns]
    QSPIM_DTL            delay after transfer            [ns]
    QSPIM_PCS_DEFSTATE   default state of PCS3..0        0x0..0xf
    QSPIM_TIMER_LO_TIME  low time of cycle timer         [ns]
    QSPIM_TIMER_HI_TIME  high time of cycle timer        [ns]
    QSPIM_RCV_FIFO_DEPTH number of queue entries in fifo 2..n  
    QSPIM_BLK_DEFINE_FRM defines the frame structure     see below
    M_LL_DEBUG_LEVEL     driver debug level              see dbg.h
    M_MK_IRQ_ENABLE      interrupt enable                0..1
    M_LL_IRQ_COUNT       interrupt counter               0..max

    QSPIM_TIMER_STATE: A value of 1 starts the cycle timer and therefore
        QSPI transmission. A value of 0 stops it.

    QSPIM_FRM_SIG_SET: Installs a signal that is sent whenever a QSPI frame
        has been transmitted. QSPIM_FRM_SIG_CLR removes this signal.

    QSPIM_EMG_SIG_CLR: Installs a signal that is sent whenever a transmit
        buffer underrun occurs. QSPIM_EMG_SIG_CLR removes this signal.

    QSPIM_CLR_RCV_FIFO: discards all entries in the receive fifo.

    QSPIM_WOMQ, QSPIM_BITS, QSPIM_CPOL, QSPIM_CPHA, QSPIM_BAUD, QSPIM_DSCLK,
    QSPIM_DTL: same meaning as the corresponding fields in the 68332 QSPI.

    QSPIM_PCS_DEFSTATE: defines the state of the PCS3..0 pins when no 
    transmission is pending.

    QSPIM_TIMER_CYCLE_TIME: define cycle time of both high/low phase 
        (together) of the cycle clock. A value of 500000 will result in
        250us low and 250us high time
        N.B. No effect in the D201 QSPI implementation!
        Timer cycle fixed to 250us low/250 us high time.

    QSPIM_RCV_FIFO_DEPTH: reallocates memory for the receive fifo. 
        Implicitely clears all pending entries

    QSPIM_BLK_DEFINE_FRM: Defines the structure of the QSPI frame that 
        is sent once per cycle. Block setstat. blk->data must be an array 
        of 16 bit words. Each word is defined as follows:

        Bit 15    14    13    12     11    10    9     8       7 .. 0
        --------------------------------------------------------------
            CONT  BITSE DT    DSCLK  PCS3  PCS2  PCS1  PCS0    NWORDS

        CONT:  like in QSPI command ram, only affects last word of slave
        BITSE: like in QSPI command ram, affects all words of slave
        DT:    like in QSPI command ram, affects all words of slave
        DSCLK: like in QSPI command ram, only affects first words of slave
        PCS3..0: state of chip select pins during transmission
        NWORDS:  number of QSPI words to transfer to/from slave

    QSPIM_BLK_CALLBACK: Can be used to install or remove a callback routine
        within the application that is called whenever a QSPI frame has
        been transferred. The <data> element of the M_SG_BLOCK structure
        must point to a QSPIM_CALLBACK_PARMS structure.
        If the QSPIM_CALLBACK_PARMS.func is zero, the callback is removed.

    QSPIM_FRAMESYN: Controls the value of the FRAMESYN signal. The passed
        value is output on the next falling edge of the cycle timer.

Input:
    h          low-level handle
    code       status code
    ch         current channel
    value      data or
               pointer to block data structure (M_SG_BLOCK)  (*)
    (*) = for block status codes

Output:
    return     success (0) or error code


Function QSPIM_GetStat()
------------------------

Syntax:
    static int32 QSPIM_GetStat(
        LL_HANDLE *h,
        int32  code,
        int32  ch,
        INT32_OR_64 *value32_or_64P
    )

Description:
    Get the driver status

    The following status codes are supported:

    Code                 Description                     Values
    -------------------  ------------------------------  ----------
    QSPIM_TIMER_STATE    get state of timer QSPI         0/1
    QSPIM_RCV_FIFO_COUNT number of frames in rcv fifo    
    QSPIM_ERRORS         get/reset errors                QSPIM_ERR_xxx
    QSPIM_WOMQ           wired OR for QSPI pins          0/1
    QSPIM_BITS           bits per word                   8..16
    QSPIM_CPOL           clock polarity                  0/1
    QSPIM_CPHA           clock phase                     0/1
    QSPIM_BAUD           SCLK baudrate                   [Hz]
    QSPIM_DSCLK          PCS to SCLK delay               [ns]
    QSPIM_DTL            delay after transfer            [ns]
    QSPIM_PCS_DEFSTATE   default state of PCS3..0        0x0..0xf
    QSPIM_TIMER_CYCLE_TIME cycle time                    [ns]
    QSPIM_RCV_FIFO_DEPTH number of queue entries in fifo 2..n  
    QSPIM_BLK_DIRECT_WRITE_FUNC determine write func ptr see below
    QSPIM_BLK_DIRECT_ISETSTAT_FUNC determine setstat func ptr see below

    M_LL_DEBUG_LEVEL     driver debug level              see dbg.h
    M_LL_CH_NUMBER       number of channels              1
    M_LL_CH_DIR          direction of curr. chan.        M_CH_BINARY
    M_LL_CH_LEN          length of curr. ch. [bits]      16
    M_LL_CH_TYP          description of curr. chan.      M_CH_INOUT
    M_LL_IRQ_COUNT       interrupt counter               0..max
    M_MK_BLK_REV_ID      ident function table ptr        -

    QSPIM_TIMER_STATE: gets the current state of cycle timer/QPSI. 0 means
        stopped, 1 means running.

    QSPIM_RCV_FIFO_COUNT: get the number of frames in rcv fifo

    QSPIM_ERRORS: reads the error flags and clears the internal error flags.
        return value is a ORed combination of QSPIM_ERR_xxx flags.

    QSPIM_BLK_DIRECT_WRITE_FUNC: Used to get entry point and argument for
        the direct write func. The <data> element of the M_SG_BLOCK structure
        must point to a QSPIM_DIRECT_WRITE_PARMS structure that is filled
        by that call.

    QSPIM_BLK_DIRECT_ISETSTAT_FUNC: Used to get entry point and argument for
        the setstat function that can be called by user interrupt service
        routines. The <data> element of the M_SG_BLOCK structure
        must point to a QSPIM_DIRECT_ISETSTAT_PARMS structure that is filled
        by that call.

    Rest of getstats correspond to the setstats with the same name

Input:
    h          low-level handle
    code       status code
    ch         current channel
    valueP     pointer to block data structure (M_SG_BLOCK)  (*) 
    (*) = for block status codes

Output:
    valueP     data ptr or
               pointer to block data structure (M_SG_BLOCK)  (*) 
    return     success (0) or error code
    (*) = for block status codes


Function QSPIM_BlockRead()
--------------------------

Syntax:
    static int32 QSPIM_BlockRead(
         LL_HANDLE *h,
         int32     ch,
         void      *buf,
         int32     size,
         int32     *nbrRdBytesP
    )

Description:
    Read QSPI frame from driver receive fifo

    Always non blocking. If no frame present in receive fifo, returns without
    error and number of read bytes is zero.

    <buf> will have the same format as the QSPI receive RAM

    Returns ERR_LL_READ if the fifo has overflowed. In this case, application
    must call Getstat QSPIM_ERRORS to clear the error.

Input:
    h            low-level handle
    ch           current channel
    buf          data buffer
    size         data buffer size

Output:
    nbrRdBytesP  number of read bytes
    return       success (0) or error code
                 ERR_LL_READ: fifo overrun occurred
                 ERR_LL_USERBUF: user buffer too small for frm


Function DirectWriteFunc()
--------------------------

Syntax:
    static int32 DirectWriteFunc(
        void *arg,
        u_int16 *qspiFrame, 
        u_int32 qspiFrameLen)

Description:
    Entry point for application when bypassing MDIS

Input:
    arg            the LL handle
    qspiFrame      ptr to data to be sent
    qspiFrameLen   number of bytes in qspiFrame

Output:
    returns        error code


Function DirectISetstat()
-------------------------

Syntax:
    static int32 DirectISetstat(
        void   *arg,
        int32  code,
        int32  ch,
        int32  value
    )

Description:
    Set the driver status from an user interrupt routine

    The following status codes are supported:

    ACTION CODES:

    Code                 Description                     Values
    -------------------  ------------------------------  ----------
    QPSIM_FRAMESYN       activate/deactive FRAMESYN pin  0/1

    QSPIM_FRAMESYN: Controls the value of the FRAMESYN signal. The passed
        value is output on the next falling edge of the cycle timer.

Input:
    arg            the LL handle
    qspiFrame      ptr to data to be sent
    qspiFrameLen   number of bytes in qspiFrame

Output:
    returns        error code


Function QSPIM_BlockWrite()
---------------------------

Syntax:
    static int32 QSPIM_BlockWrite(
         LL_HANDLE *h,
         int32     ch,
         void      *buf,
         int32     size,
         int32     *nbrWrBytesP
    )

Description:
    Write QSPI frame into driver internal buffer

    Always non blocking.

    The buffered frame will then be transferred to the QSPI slaves in the
    next cycle.

    <buf> must have the same format as the QSPI transmit RAM.
    <size> must have exactly the number of bytes of the QSPI frame

Input:
    h            low-level handle
    ch           current channel (ignored)
    buf          data buffer
    size         data buffer size (bytes)

Output:
    nbrWrBytesP  number of written bytes
    return       success (0) or error code
                 ERR_LL_WRITE:
                 ERR_LL_USERBUF: buffer size didn't match


Function QSPIM_Irq()
--------------------

Syntax:
    static int32 QSPIM_Irq(
       LL_HANDLE *h
    )

Description:
    Interrupt service routine

    The interrupt is triggered when a timer interrupt or
    a QSPI interrupt occurs

    If the driver can detect the interrupt's cause it returns
    LL_IRQ_DEVICE or LL_IRQ_DEV_NOT, otherwise LL_IRQ_UNKNOWN.

Input:
    h        low-level handle

Output:
    return   LL_IRQ_DEVICE    irq caused by device
             LL_IRQ_DEV_NOT   irq not caused by device
             LL_IRQ_UNKNOWN   unknown


Function QSPIM_Info()
---------------------

Syntax:
    static int32 QSPIM_Info(
       int32  infoType,
       ...
    )

Description:
    Get information about hardware and driver requirements

    The following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    LL_INFO_HW_CHARACTER      hardware characteristics
    LL_INFO_ADDRSPACE_COUNT   nr of required address spaces
    LL_INFO_ADDRSPACE         address space information
    LL_INFO_IRQ               interrupt required
    LL_INFO_LOCKMODE          process lock mode required

    The LL_INFO_HW_CHARACTER code returns all address and 
    data modes (ORed) which are supported by the hardware
    (MDIS_MAxx, MDIS_MDxx).

    The LL_INFO_ADDRSPACE_COUNT code returns the number
    of address spaces used by the driver.

    The LL_INFO_ADDRSPACE code returns information about one
    specific address space (MDIS_MAxx, MDIS_MDxx). The returned 
    data mode represents the widest hardware access used by 
    the driver.

    The LL_INFO_IRQ code returns whether the driver supports an
    interrupt routine (TRUE or FALSE).

    The LL_INFO_LOCKMODE code returns which process locking
    mode the driver needs (LL_LOCK_xxx).

Input:
    infoType     info code
    ...          argument(s)

Output:
    return       success (0) or error code


Function DMA_Init()
-------------------

Syntax:
    void __DMA_Init(LL_HANDLE *h)

Description:
    Init 8240 DMA

Input:
    h      ll handle

Output:
    -


Function DMA_Transfer()
-----------------------

Syntax:
    int32 __DMA_Transfer(
        LL_HANDLE *h, 
        void *src, 
        void *dst, 
        u_int32 len,
        u_int32 dir)

Description:
    Perform DMA transfer 

    Wait for it to finish 

Input:
    h      ll handle
    src    source address
    dst    destination address
    len    number of bytes to transfer
    dir    direction
           0 = mem -> mem 
           1 = mem -> pci
           2 = pci -> mem
           3 = pci -> pci

Output:
    returns: 0=ok 1=unsuccessful

